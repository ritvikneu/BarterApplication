openapi: 3.0.3 
info: 
    title: BarterSystem API 
    description: BarterSystem API rest
    version: 1.0.0
paths:
  /barter/{user_id}:
      get:
          operationId: retreiveUser
          parameters:
            - name: user_id
              in: path
              required: true
              schema:
                type: integer
          responses:
              "200":
                description: Returns single user
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              "401":
                description: Authentication Error
                content: 
                  application/json:
                      schema:
                        type: object
  /barter/user:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Bad request - request body is invalid
        '409':
          description: Conflict - email address is already registered
          
  /barter/needs/{user_id}:
      get:
          operationId: retreiveUserNeed
          parameters:
            - name: user_id 
              in: path
              required: true
              schema:
                type: integer
          responses:
              "200":
                description: Returns multiple needs of user
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserNeed'
              "401":
                description: Authentication Error
                content: 
                  application/json:
                      schema:
                        type: object
      post:
        summary: Add New User Need
        operationId: addUserNeed
        parameters:
          - name: user_id
            in: path
            description: The ID of the user who created the need
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserNeed'
        responses:
          '201':
            description: The newly created NewUserNeed.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NewUserNeed'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                    message:
                      type: string
                    
                example:
                  code: 500
                  message: Internal Server Error
        
  /barter/haves/{user_id}:
      get:
          operationId: retreiveUserHaves
          parameters:
            - name: user_id 
              in: path
              required: true
              schema:
                type: integer
          responses:
              "200":
                description: Returns multiple haves of user
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserHaves'
              "401":
                description: Authentication Error
                content: 
                  application/json:
                      schema:
                        type: object
      post:
        summary: Add New User Have
        operationId: addUserHave
        parameters:
          - name: user_id
            in: path
            description: The ID of the user who created the Have
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserHave'
        
        responses:
          '201':
            description: The newly created NewUserHave.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NewUserHave'

          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                    message:
                      type: string
                    
                example:
                  code: 500
                  message: Internal Server Error
            
                        
  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the group
        schema:
          type: integer
          format: int64

    get:
      summary: Get a group by ID
      operationId: GetGroupByID
      responses:
        '200':
          description: Group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 404
                message: Group not found

    put:
      summary: Update a group by ID
      operationId: UpdateGroupByID
      requestBody:
        description: Group object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
     
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 404
                message: Group not found

    delete:                                 
      summary: Delete a group by ID
      operationId: DeleteGroupByID

      responses:
        '204':
          description: Group deleted
        '404':
          description: Group Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 404
                message: Group not found

  /groups:
    post:
      summary: Create a new group
      operationId: CreateGroupByID
      requestBody:
        description: Group object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
  
  /services:
    get:
      summary: Get all services
      description: Retrieves a list of all service.
      responses:
        '200':
          description: A list of service.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    post:
      summary: Create a new service
      description: Creates a new service.
      requestBody:
        description: service object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: The newly created good.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 400
                message: Internal Server Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error

  /services/{serviceId}:
    get:
      summary: Get a service by ID
      description: Retrieves a service by its ID.
      parameters:
        - name: serviceId
          in: path
          description: ID of the good to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested good.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    put:
      summary: Update a service by ID
      description: Updates a service by its ID.
      parameters:
        - name: serviceId
          in: path
          description: ID of the service to update
          required: true
          schema:
            type: string
      requestBody:
        description: service object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: The updated service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 400
                message: Internal Server Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    delete:
      summary: Delete a service by ID
      description: Deletes a service by its ID.
      parameters:
        - name: serviceId
          in: path
          description: ID of the service to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The good was successfully deleted.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
  
  /goods:
    get:
      summary: Get all goods
      description: Retrieves a list of all goods.
      responses:
        '200':
          description: A list of goods.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Good'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    post:
      summary: Create a new good
      description: Creates a new good.
      requestBody:
        description: Good object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Good'
      responses:
        '201':
          description: The newly created good.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'
        '400':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 400
                message: Internal Server Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error

  /goods/{goodId}:
    get:
      summary: Get a good by ID
      description: Retrieves a good by its ID.
      parameters:
        - name: goodId
          in: path
          description: ID of the good to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested good.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    put:
      summary: Update a good by ID
      description: Updates a good by its ID.
      parameters:
        - name: goodId
          in: path
          description: ID of the good to update
          required: true
          schema:
            type: string
      requestBody:
        description: Good object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Good'
      responses:
        '200':
          description: The updated good.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'
        '400':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 400
                message: Internal Server Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error
    delete:
      summary: Delete a good by ID
      description: Deletes a good by its ID.
      parameters:
        - name: goodId
          in: path
          description: ID of the good to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The good was successfully deleted.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  
              example:
                code: 500
                message: Internal Server Error              


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User Object Identifier
          example: 123
        name:
          type: string
          description: User name
          example: John
        email:
          type: string
          description: Email Id of user
          example: john@gmail.com
        phone: 
          type: number
          description: Phone number of the use
          example: 123467899
          
    UserRegistration:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: "password123"
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe  
          
    UserNeed:
      type: array
      items:
        type: object
        properties: 
          id:
            type: integer
            description: User 
          needId:
            type: integer
            description: User Need Laptop
          type:
            type: string
            description: Goods
          Description:
            type: string
            description: Laptop
      example:
        - id: 111
          haveId: 111111
          type: service
          description: Laptop
        - id: 222
          needId: 222222
          type: service
          description: Tutoring
          
    NewUserNeed:
      type: object
      properties:
        need_id:
          type: integer
          description: The ID of the need
        user_id:
          type: integer
          description: The ID of the user who created the need
        title:
          type: string
          description: The title of the need
        description:
          type: string
          description: A detailed description of the need
      required:
        - user_id
        - title
        - description
        
    NewUserHave:
      type: object
      properties:
        have_id:
          type: integer
          description: The ID of the have
        user_id:
          type: integer
          description: The ID of the user who created the have
        title:
          type: string
          description: The title of the need
        description:
          type: string
          description: A detailed description of the have
      required:
        - user_id
        - title
        - description
          
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        UserId:
          type: integer
        HaveId:
          type: integer
        NeedId:
          type: integer
      example:
        id: 1
        title: "Group 1"
        UserId: 1
        HaveId: 1
        NeedID: 1
        
    UserHaves:
      type: array
      items:
        type: object
        properties: 
          id:
            type: integer
            description: User 
          haveId:
            type: integer
            description: User Have Laptop
          type:
            type: string
            description: Goods
          Description:
            type: string
            description: Laptop
      example:
        - id: 111
          haveId: 111111
          type: goods
          description: Laptop
        - id: 222
          haveId: 222222
          type: service
          description: Tutoring
          
    Service:
      type: object
      properties:
        serviceId:
          type: integer
          description: The ID of the good.
        title:
          type: string
          description: The title of the good.
        category:
          type: string
          description: The category of the good.
        description:
          type: string
          description: The description of the good.
        skill_level:
          type: string
          description: The brand of the good.
        duration:
          type: string
          description: The photo of the good.
        value:
          type: integer
          description: The value of the good.
      example:
        serviceId: 1
        title: "Title1"
        category: "category1"
        description: "description1"
        skill_level: "medium"
        duration: "photo1"
        value: 10
    
    Good:
      type: object
      properties:
        goodId:
          type: integer
          description: The ID of the good.
        title:
          type: string
          description: The title of the good.
        category:
          type: string
          description: The category of the good.
        description:
          type: string
          description: The description of the good.
        brand:
          type: string
          description: The brand of the good.
        photo:
          type: string
          description: The photo of the good.
        monetary_value:
          type: integer
          description: The value of the good.
        condition:
          type: string
          description: The condition of the good.
        quantity:
          type: integer
          description: The quantity of the good.
      example:
        goodId: 1
        title: "Title1"
        category: "category1"
        description: "description1"
        brand: "brand1"
        photo: "photo1"
        monetary_value: 10
        condition: "new"
        quantity: 1    